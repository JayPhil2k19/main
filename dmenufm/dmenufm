#!/bin/sh

# Dmenu-based directory browser
# Dependency: dmenu; xclip

### OPTIONS AND VARIABLES

## OPTIONS
FM_PATH="$HOME/.config/dmenufm"
BMKFILE="$FM_PATH/dmenufm_bookmark"
CMDFILE="$FM_PATH/dmenufm_command"
HISFILE="$FM_PATH/dmenufm_history"
MAX_HIS_LENGTH=5000
XDGDIR1="/usr/share/applications"
XDGDIR2="/usr/local/share/applications"

## GLOBAL VARIABLES
CHOICE="placeholder"
TARGET="./"
BACKWARD="../"
ACTION="Actions"
TERM="Terminal"
FM_CP_PATH="PCP - Copy path"
FM_MK_DIR="MKD - Create new directory"
FM_MK_FILE="MKF - Create new text file"
FM_RM="RMM - Remove files / directory"
FM_MV="MVR - Move or rename files"
FM_TRASH="TRH - Trash of dmenufm"
FM_HIST="HIS - History of dmenufm"
FM_BMARK="BMK - Bookmark for dmenufm"
FM_COMMAND="CMD - Frequently used command"
ACTLIST="$FM_CP_PATH:$FM_MK_DIR:$FM_MK_FILE:$FM_MV:$FM_RM:$FM_TRASH:$FM_HIST:$FM_BMARK:$FM_COMMAND"



### FUNCTIONS


## OPEN FUNCTIONS

# You may need to modify executecmd to match how your terminal execute the command.
# Use `< $(locate $software.desktop | tail -n 1) grep "Terminal=false` to check whether the .desktop file should open in terminal
# Like sxiv, the desktop file don't have Terminal entry. You need to Use `< $(locate sxiv.desktop | tail -n 1) sudo $EDITOR` to add `Terminal=false`
executecmd () {
	software=$(printf '%s' "$1" | awk -F ' ' '{print $1}')
	if < "$(find "$XDGDIR1" "$XDGDIR2" *"$software"*.desktop | tail -n 1)" grep "Terminal=false"; then
		printf '%s' "$1" | ${SHELL:-"/bin/sh"} &
	else
		$TERMINAL -e $1 | ${SHELL:-"/bin/sh"} &
	fi
}

# Open files with xdg-open
# To edit default applications in xdg-open,
# sudo $EDITOR /usr/share/applications/mimeinfo.cache
open () {
	appdesktop=$(xdg-mime query filetype "$1" | xargs -I {} xdg-mime query default "{}")
	if < "$(find "$XDGDIR1" "$XDGDIR2" -name "$appdesktop" | tail -n 1)" grep "Terminal=false"; then
		xdg-open "$1" &
	else
		$TERMINAL -e xdg-open "$1" &
	fi
}


## MENUFUNCTIONS

# Generate directories
# Variables cannot store multiline string, so transform to ':'
# Misbehaving due to space in file/directory name, so add ' at beginning and end.
menudir () {
	DIRs=$(for dir in *; do [ -d "$dir" ] && printf '%s:' "$dir/"; done | sed "1 s/^/'/; s/$/'/")
}

# Generate dotdirectories
# Delete extra ./ and ../ (Need use = as sed delimiter)
menudotdir () {
	DOTDIRs=$(for dir in .*; do [ -d "$dir" ] && printf '%s:' "$dir/"; done | sed "1 s/^/'/; s/$/'/; s=./==; s=../==")
}

# Generate files
menufile () {
	FILEs=$(for file in *; do [ -f "$file" ] && printf '%s:' "$file"; done | sed "1 s/^/'/; s/$/'/")
}

# Generate dotfiles
menudotfile () {
	DOTFILEs=$(for file in .*; do [ -f "$file" ] && printf '%s:' "$file"; done | sed "1 s/^/'/; s/$/'/")
}

# Generate default menu
menu () {
	menudir
	menudotdir
	menufile
	menudotfile
}

# Update menu in each move
update_menu () {
	list=
	# Rebuild list in every move
	for element in $keeplist; do
		case $element in
			DIRs) menudir && list="$list$DIRs" ;;
			FILEs) menufile && list="$list$FILEs" ;;
			DOTDIRs) menudotdir && list="$list$DOTDIRs" ;;
			DOTFILEs) menudotfile && list="$list$DOTFILEs" ;;
		esac
	done
}

# Generate menu for action choice, only for current directory.
# $1 is the prompt, $2 is the selected background color
Generate_action_menu () {
	while [ -n "$CHOICE" ]; do
		update_menu
		# Default menu list if no arguments given
		[ -z "$keeplist" ] && menu && list="$DIRs$FILEs$DOTDIRs$DOTFILEs"
		# Generate menu with/without arguments
		# Show only the current directory and one level of parent directory
		twopwd=$(printf '%s' "$PWD" | awk -F '/' '{print $(NF-1)"/"$NF}')
		CHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d" | dmenu -i -l 10 -sb "$2" -p "$1")
		# Outcome matching
		if [ "$CHOICE" = "$TARGET" ]; then
			HERE=$(printf '%s' "$PWD")
			name=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
			break
		elif [ "$CHOICE" = "$BACKWARD" ]; then
			cd "../" || return
			dmenufm_history
		elif [ -d "$CHOICE" ]; then
			cd "$CHOICE" || exit 1
			dmenufm_history
			continue
		elif [ -f "$CHOICE" ]; then
			HERE=$(printf '%s' "$PWD/$CHOICE")
			name=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
		 	break
		else
			break
		fi
	done
}

## PROMPT FUNCTIONS
notifyprompt () {
	dmenu -fn Monospace-18 -sb "#d79921" -sf "#1d2021" -nf "#000000" -nb "#000000" -p "$1" <&-
}

# Prompt that used in dangerous action
dangerprompt () {
	# From Luke Smith
	# Use && command to execute the command after "Yes"
	[ "$(printf "No\\nYes" | dmenu -i -p "$1" -nb darkred -sb red -sf white -nf gray )" = "Yes" ]
}


## TOOL FUNCTIONS

# Store every move between directories into history
dmenufm_history () {
	[ ! -d "$FM_PATH" ] && mkdir -p "$FM_PATH"
	dirmark=$(printf '%s' "$PWD" | awk -F '/' '{print $NF}')
	printf '%s\n' "$dirmark - $PWD" | sed "/^$/ d" >> "$HISFILE"
	# Limit the max number of history
	hisnum=$(wc -l "$HISFILE" | awk '{print $1}')
	if [ "$hisnum" -ge "$MAX_HIS_LENGTH" ]; then
		sed "1d" "$HISFILE" > "$HISFILE.backup" && cp "$HISFILE.backup" "$HISFILE"
	fi
}



# Actions that for dmenufm
dmenufm_action (){
	move=$(printf '%s' "$ACTLIST" | tr ':' '\n' | dmenu -i -l 10 -p "Actions:")
	case $move in
		"$FM_CP_PATH")
			# Copy path to xclip, and send notification.
			Generate_action_menu "Copy directory/file path: " "#33691e"
			[ -n "$CHOICE" ] && printf '%s' "$HERE" | xclip -selection clipboard && notifyprompt "Path $name copied to clipboard." || return
			;;
		"$FM_MK_DIR")
			dirname=$(dmenu -fn -i -p "Enter Directory name: ")
			mkdir -p "$dirname"
			notifyprompt "Directory $dirname created." || return
			;;
		"$FM_MK_FILE")
			filename=$(dmenu -fn -i -p "Enter plain text file name: ")
			touch "$filename"
			notifyprompt "File $filename created." || return
			;;
		"$FM_MV")
			#TODO
			;;
		"$FM_RM")
			# Choose file/directory in current directory to remove
			Generate_action_menu "Remove file / directory: " "#33691e"
			# Check the chosen on is directory or not
			[ -d "$HERE" ] && result=$?
			if dangerprompt "Remove all files and/or subdirectories in $name?" && rm -rf "$HERE"; then
				if [ $result -eq 0 ]; then
					notifyprompt "$name removed." || return
					cd "../" || return
					result=
				else
					notifyprompt "$name removed." || return
				fi
			else
				return
			fi

			;;
		"$FM_TRASH")
			[ ! -d "$FM_PATH/trash" ] && mkdir -p "$FM_PATH/trash"
			trashmenu=$(printf '%s\n' "Move to trash" "Go to trash" "Empty trash" | sed "/^$/ d" | dmenu -i -l 20 -p "Dmenufm Trash")
			case $trashmenu in
				"Move to trash")
					Generate_action_menu "Move file/directory to trash: " "#33691e"

					# Check the chosen on is directory or not
					[ -d "$HERE" ] && result=$?
					# Say yes in dangerprompt, and send notification. Or do nothing.
					if dangerprompt "Move all files and/or subdirectories in $name to trash?" && mv "$HERE" "$FM_PATH/trash"; then
						if [ $result -eq 0 ]; then
							# If chosen one is directory, send notification and cd to parent directory
							notifyprompt "$name moved to trash." || return
							cd "../" || return
							# Reset result value
							result=
						else
							# If not, just send notification.
							notifyprompt "$name moved to trash." || return
						fi
					else
						return
					fi
					;;
				"Go to trash")
					cd "$FM_PATH/trash" || return
					;;
				"Empty trash")
					# Lesson: You cannot quote a wildcard. No quote on *.
					if dangerprompt "Remove all files and/or directory in trash?" && rm -rf "$FM_PATH/trash/"*; then
						notifyprompt "Trash is empty." || return
					else
						return
					fi
					;;
			esac
			;;
		"$FM_HIST")
			# Use sed command to mimic reverse of cat for POSIX.
			goto=$(sed '1!G;h;$!d' "$HISFILE" | dmenu -i -l 20 -p "Dmenufm History")
			destination=$(printf '%s' "$goto" | awk -F ' - ' '{print $2}')
			cd "$destination" || return
			;;
		"$FM_BMARK")
			markmenu=$(printf '%s\n' "$(cat $BMKFILE)" "Add BMK" "Delete BMK" | sed "/^$/ d" | dmenu -i -l 20 -p "Dmenufm Bookmark")
			case "$markmenu" in
				"Add BMK")
					Generate_action_menu "Choose file/directory and add to BMK: " "#33691e"
					mark=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
					printf '%s\n' "$mark - $HERE" >> "$BMKFILE"
					sed "/^$/ d" "$BMKFILE" >  "$BMKFILE.backup" && cp "$BMKFILE.backup" "$BMKFILE"
					;;
				"Delete BMK")
					delbmk=$(< "$BMKFILE" dmenu -i -l 10 -sb darkred -p "Delete chosen bmk: ")
					# POSIX way of sed -i.
					# Assign address as '=' by '\=pattern='
					# Create backup file and cp to original file.
					sed "\=$delbmk= d" "$BMKFILE" > "$BMKFILE.backup" && cp "$BMKFILE.backup" "$BMKFILE"
					;;
				*)
					destination=$(printf '%s' "$markmenu" | awk -F ' - ' '{print $2}')
					cd "$destination" || open "$destination"
			esac
			;;
		"$FM_COMMAND")
			cmdmenu=$(printf '%s\n' "$(cat "$CMDFILE")" "Add CMD" "Delete CMD" "Type and execute" | sed "/^$/ d" | dmenu -i -l 20 -p "Dmenufm Custom Command")
			case "$cmdmenu" in
				"Add CMD")
					addcmd=$(dmenu -i -sb "#33691e" -p "Recording your command: ")
					desp=$(dmenu -i -sb "#33691e" -p "Enter command description: ")
					printf '%s\n' "$addcmd - $desp" >> "$CMDFILE"
					sed "/^$/ d" "$CMDFILE" >  "$CMDFILE.backup" && cp "$CMDFILE.backup" "$CMDFILE"
					;;
				"Delete CMD")
					delcmd=$(< "$CMDFILE" dmenu -i -l 10 -sb darkred -p "Delete chosen command: ")
					# POSIX way of sed -i.
					# Assign address as '+' by '\+pattern+'
					# '=' seems not usable in command
					# Create backup file and cp to original file.
					sed "\+$delcmd+ d" "$CMDFILE" > "$CMDFILE.backup" && cp "$CMDFILE.backup" "$CMDFILE"
					;;
				"Type and execute")
					execmd=$(dmenu -i -sb "#33691e" -p "Type and execute: ")
					executecmd "$execmd"
					;;
				*)
					execmd=$(printf '%s' "$cmdmenu" | awk -F ' - ' '{print $1}')
					executecmd "$execmd"
					;;
			esac
			;;
	esac
	dmenufm_menu
}

### MAIN FUNCTIONS

dmenufm_menu () {
	while [ -n "$CHOICE" ]; do
		update_menu
		# Default menu list if no arguments given
		[ -z "$keeplist" ] && menu && list="$DIRs$FILEs$DOTDIRs$DOTFILEs"
		# Generate menu with/without arguments
		# Show only the current directory and one level of parent directory
		twopwd=$(printf '%s' "$PWD" | awk -F '/' '{print $(NF-1)"/"$NF}')
		CHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" "$ACTION" "$TERM" "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d" | dmenu -i -l 10 -p "$twopwd")
		# Outcome matching
		if [ "$CHOICE" = "$TARGET" ]; then
			open "$PWD"
			break
		elif [ "$CHOICE" = "$BACKWARD" ]; then
			cd "../"
			dmenufm_history
		elif [ "$CHOICE" = "$ACTION" ]; then
			dmenufm_action
			break
		elif [ "$CHOICE" = "$TERM" ]; then
			$TERMINAL
		elif [ -d "$CHOICE" ]; then
			cd "$CHOICE" || exit 1
			dmenufm_history
			continue
		elif [ -f "$CHOICE" ]; then
			open "$PWD/$CHOICE"
		 	break
		else
			break
		fi
	done
}

### ARGUMENTS

while [ -n "$1" ]; do
	case $1 in
		"-d"|"--directory" )
			keeplist="${keeplist} DIRs"
			;;
		"-f"|"--file" )
			keeplist="${keeplist} FILEs"
			;;
		"-D"|"--dotdirectory" )
			keeplist="${keeplist} DOTDIRs"
			;;
		"-F"|"--dotfile" )
			keeplist="${keeplist} DOTFILEs"
			;;
		"-h"|"--help" )
			printf "Optional arguments for custom use:
			-d | --directory: menu is directories, no input
			-f | --file: menu is files, no input
			-D | --dotdirectory: menu is hidden directories, no input
			-F | --dotfile: menu is hidden files, no input
			-h | --help: Show this message\\n"
			exit 0
			;;
		"*" )
			printf "Invalid option"
			exit 1
			;;
	esac
	shift
done

### RUN THE MAIN FUNCTION
dmenufm_menu
